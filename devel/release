#!/bin/bash
set -euo pipefail

devel="$(dirname $0)"
repo="$devel/.."
version_file="$repo/nextstrain/cli/__version__.py"
changes_file="$repo/CHANGES.md"

main() {
    local version

    assert-clean-working-dir
    assert-changelog-has-additions
    assert-changelog-has-changes-for-next

    version="${1:-$(next-version)}"
    echo "New version will be $version."

    update-version $version
    update-changelog $version
    commit-and-tag $version
    unreleased-version $version+git
    remind-to-push $version
}

assert-clean-working-dir() {
    local status="$(git status --porcelain --untracked-files=no | grep -vwF "$(basename "$changes_file")" || true)"

    if [[ -n $status ]]; then
        echo "Please commit all changes before releasing:" >&2
        echo >&2
        echo "$status" >&2
        echo >&2
        echo "Only $(basename "$changes_file") is allowed to have uncommitted changes." >&2
        exit 1
    fi
}

assert-changelog-has-additions() {
    local current_version="$(read-version)"
    local numstat="$(git diff --numstat "${current_version%%+*}" -- "$changes_file")"
    local insertions deletions rest

    if [[ -z $numstat ]]; then
        insertions=0
        deletions=0
    else
        read -r insertions deletions rest <<<"$numstat"
    fi

    local net_changed=$(($insertions - $deletions))

    if [[ $net_changed -lt 1 ]]; then
        echo "It doesn't look like $(basename "$changes_file") was updated; only $insertions - $deletions = $net_changed line(s) were changed." >&2
        exit 1
    fi
}

assert-changelog-has-changes-for-next() {
    if [[ -z "$("$devel"/changes __NEXT__)" ]]; then
        echo "It doesn't look like $(basename "$changes_file") has entries for __NEXT__." >&2
        exit 1
    fi
}

next-version() {
    local current_version="$(read-version)"
    current_version="${current_version%%+*}"

    read -e -p "Current version is $current_version."$'\n'"New version? " -i "$current_version" new_version

    if [[ -z $new_version || $new_version == $current_version ]]; then
        echo "You must provide a new version!" >&2
        exit 1
    fi

    echo "$new_version"
}

update-version() {
    local new_version="$1"
    local current_version="$(read-version)"

    perl -pi -e "s/(?<=^__version__ = ')(.*)(?='$)/$new_version/" "$version_file"

    if [[ $new_version != $(read-version) ]]; then
        echo "Failed to update $version_file!" >&2
        exit 1
    fi
}

update-changelog() {
    local new_version="$1"
    local today="$(date +"%d %B %Y")"

    # Remove leading zero from day if present
    today="${today#0}"

    # Add the new version heading immediately after the __NEXT__ heading,
    # preserving the __NEXT__ heading itself.
    perl -pi -e "s/(?<=^# __NEXT__$)/\n\n\n# $new_version ($today)/" "$changes_file"
}

commit-and-tag() {
    local version="$1"

    git commit -m "version $version" "$version_file" "$changes_file"
    git tag -sm "version $version" "$version"
}

unreleased-version() {
    local unreleased_version="$1"

    # Add +git local part to mark any further development
    update-version "$unreleased_version"

    git commit -m "dev: Bump version to $unreleased_version" "$version_file"
}

remind-to-push() {
    local version="$1"

    echo
    echo
    echo "Version updated, committed, and tagged!"
    echo
    echo "Please remember to push, including tags:"
    echo
    echo "   git push origin master tag $version"
    echo
    echo "CI will build dists for the release tag and publish them after tests pass."
    echo
}

read-version() {
    python3 -c "exec(open('''$version_file''').read()); print(__version__)"
}

main "$@"
